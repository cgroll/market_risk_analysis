-*- org-src-preserve-indentation: t -*-
#+TITLE: Makefile for copula factor model
(setq org-src-preserve-indentation t)
#+OPTIONS: ^:nil

* Theory
Targets:
As targets, we will chose any relevant data, together with any
information that we draw from this data:
- data
- pictures
- tables
- presentation outputs: html, latex, ...
- applications


** Structure

Distinguish between steps that create data and steps that analyze
data:
- strictly divide them: a script may either create relevant data or
  analyze it
- outline diagram for project with core data creation
- there exist several data directories: 
	- one submodule directory for proprietary data
	- a directory in this repository itself for non-proprietary data
     that may be made publicly available
- visualization rules could be made more automatic:
	- not each graphic needs to be specified as individual target
	- script and graphics share pattern of file name
	- multiple graphics per script possible
	- every graphics will be uniquely identified with a combination of
     script file name and a number
	- e.g., for a given script *creation.jl*, all associated graphics
     must follow the naming convention *creation-1.pdf*,
     *creation-2.pdf*, and so forth.
- Jupyter notebooks:
	- if it should be desirable to have text with code mixed together
     this could be done in a Jupyter notebook
	- code from notebooks can be exported to .jl files and be included
     into the build process

* Setup targets

- define sub-targets and directories:
	- PICS_DIR: storage of re-creatable pictures
	- PRIV_DATA_DIR: storage re-creatable proprietary data
	- DATA_DIR: storage re-creatable data
	- DATA_SRC: library of Julia files to create data
	- PICS_SRC: Julia files to create pictures

** Directories

#+BEGIN_SRC makefile :tangle ./Makefile
# gnu makefile for cfm

PROJ_DIR := .
PICS_DIR := pics
PRIV_DATA_DIR := financial_data
DATA_DIR := data
DATA_SRC := data_src
PICS_SRC := src

#+END_SRC


** Specify data targets

- data targets are grouped into related subparts
- once the target files are defined for each subpart, we throw them
  together and prepend the file directory.

#+BEGIN_SRC makefile :tangle ./Makefile
############################################################
############## SPECIFY MAIN DATA FOR EACH PROCESSING SCRIPT:
############################################################

SP500_RAW_DATA := raw_data/SP500TickerSymbols.csv raw_data/SP500.csv 
DATA_NAMES := $(SP500_RAW_DATA)
DATA_FULL_NAMES := $(addprefix $(PRIV_DATA_DIR)/,$(DATA_NAMES))

#+END_SRC

** Specify picture targets

As already mentioned, the challenge at this step will be to enable GNU
Make to automatically determine the graphics targets, together with
the recipes that are required for creation. As first guess, one might
think that one could simply list all the files in the picture
directory, and find the associated script for creation through pattern
matching of file names. However, this approach is to simplistic, and
would only enable you to update already existing graphics files. For
example, when listing the files in the directory, you might get
./pics/missing_values-1.pdf, ./pics/missing_values-2.pdf and
./pics/missing_values-3.pdf. Then, with pattern matching you will find
the underlying script file, ./rpics/missing_values.R, and execute it
in order to update the graphics. However, let's assume that the
graphics file are not yet present in the graphics directory yet. If
you keep to this sequence of action, you will not find any target
files in the first step, since your directory is empty. Hence, there
simply will be no pattern matching and execution of the underlying
script. Hence, it will not work this way.

Instead, you need to make use of the property that the underlying
script files are always present, as they are not targets themselves.
Hence, you need to get the list of script files in your directory, and
derive the graphics file from them. Only then, you can follow the
steps described above: for each target, find the underlying script
through pattern matching of file names, and execute it for creation.

However, there is still one problem with this approach. We want to
allow a given script file to produce more than just one graphics file.
Hence, GNU Make would actually need to know, how many targets to
create for any given script file. Once it found
./rpics/missing_values.R in the script directory, does it need to
create a target for ./pics/missingValues-1.pdf only, or also for
./pics/missingValues-2.pdf, ./pics/missing_values-2.pdf and more?

This is something that we will not try to implement in a bulletproof
manner, but which we simply will circumvent by focusing on the first
target graphics only. Hence, we only run the script file in case that
./pics/missing_values-1.pdf is not yet present or needs to be updated.
This should be sufficient for most of the cases, as all graphics from
a common script file should usually be simultaneously created anyways.
Nevertheless, if one manually deleted ./pics/missing_values-3.pdf, GNU
Make would not automatically execute the script, as it only checks for
presence of ./pics/missing_values-1.pdf. 

For most practical matters, this sloppiness should be okay.
Nevertheless, we still may want to permit ourselves an additional
emergency protection. Thus, we will implement a way to delete all
graphics files, so that we could start from scratch in case that our
graphics files did get messed up.

Still, however, at this point we did not take into account that our
graphics could be produced from different statistical software. As
long as we only rely on R, it is easy to derive the recipe for the
target: we simply need to run the associated R script. However, in
case of multiple software languages, we need to be able to further
distinguish between files created with different languages. Hence,
scripts of different languages need to be stored in separate
directories, so that we can keep track of the language in a variable.
At the end, pdf files that match any of the files in a list of R
files, RPICS_FILE_NAMES, will have a different recipe than files that
match with MPICS_FILE_NAMES. We will need to take this into account in
the recipes.

Now, the code for graphics file in our Makefile reads as follows.
First, get the names of all files in the directory where our R
graphics script files are stored. From these files, we extract the
file name only, with directory path our file extension. For file
./rpics/missing_values.R, we get *missing_values* only. Then, we
create *missing_values-1.pdf* as target, and prepend the picture
directory. We also keep track of the pattern missing_values-*.pdf, in
order to able to delete all graphics files if necessary.

#+BEGIN_SRC  makefile :tangle ./Makefile
################################################
############## CREATION OF PDFS
################################################

# get list of all Julia source files for graphics
PICS_SCRIPTS_NAMES := $(notdir $(wildcard $(PICS_SRC)/*.jl))
PICS_FILE_NAMES := $(patsubst %.jl,%-1.pdf,$(PICS_SCRIPTS_NAMES))
#RPICS_FILE_NAMES := missing_values-1.pdf visualize_volatilities-1.pdf market_trend_power-1.pdf
PICS_FULL_NAMES := $(addprefix $(PICS_DIR)/,$(PICS_FILE_NAMES)) 

PICS_FILE_NAMES_FOR_DELETION := $(patsubst %.jl,%-*.pdf,$(PICS_SCRIPTS_NAMES))

# add possibility to add other pictures also
ALL_PICS_FULL_NAMES := $(PICS_FULL_NAMES)

#+END_SRC


* High-level targets

Now that all low-level targets have been specified, we can make use of
the variables in order to create our high-level default target. It
will be implemented as a phony target, such that all of its
dependencies will always be checked when called. Phony targets are
more robust, since accidentally creating a file of equal name (in this
case: "all") in the directory will not confuse GNU Make.

#+BEGIN_SRC makefile :tangle ./Makefile
# hierarchically highest target:
all: $(DATA_FULL_NAMES) $(ALL_PICS_FULL_NAMES)
.PHONY: all
#+END_SRC

#+BEGIN_SRC makefile :tangle ./Makefile
# phony target to create all data
.PHONY: data
data: $(DATA_FULL_NAMES)
#+END_SRC


* Data creation sequence

The data files lie at the very core of the project. Individual data
files are interrelated, so that they need to be created in a certain
sequential order. Thus, it is really hard to come up with some

* procedure to automatically create the recipes for the data files. The
recipes hence will be listed manually. For each target data, you will
need to specify all the data that it depends on, as well as the script
file that is required for its computation.

#+BEGIN_SRC makefile :tangle ./Makefile
###############################################
############## CREATION OF MAIN_DATA:
###############################################

$(PRIV_DATA_DIR)/raw_data/SP500TickerSymbols.csv:
	cp $(HOME)/research/julia/EconDatasets/data/SP500TickerSymbols.csv $@

$(PRIV_DATA_DIR)/raw_data/SP500.csv: download_scripts/sp500_stock_price_data.jl $(PRIV_DATA_DIR)/raw_data/SP500TickerSymbols.csv
	julia download_scripts/sp500_stock_price_data.jl

#+END_SRC

* Graphics recipes

In contrast to the data files, there is no sequential order required
here. Once the data files are created, the graphics scripts can be
executed in any arbitrary order. However, we still need to make sure
that all data was updated before. Hence, at the beginning of each rule
we first make sure that the complete data is accurate.

For each graphics file, we then have only one dependency: its
underlying script file. As mentioned earlier, we only list the first
graphics associated with each graphics script in our targets: for
./rpics/missing_values.R this would be ./pics/missing_values-1.pdf.
For this file, we then first need to find the underlying script file
through pattern matching, before we can execute it as batch command.
Thereby, $< is an automatic variable, representing the first
prerequisite.

#+BEGIN_SRC makefile :tangle ./Makefile
# recipe for r graphics
$(addprefix $(PICS_DIR)/,$(PICS_FILE_NAMES)): $(PICS_DIR)/%-1.pdf: $(PICS_SRC)/%.jl
	make data
	julia $<

#+END_SRC

* Other helpful phony targets
#+BEGIN_SRC makefile :tangle ./Makefile
# additional targets:
# TAGS files
# datasets
# executable files
# benchmark results
# unit tests

print-%:
	@echo '$*=$($*)'

# help - The default goal
.PHONY: help
help:
	$(MAKE) --print-data-base --question

.PHONY: clean
clean:
	rm -f Makefile~

# in case pics-3.pdf has been deleted, while pics-1.pdf still exists,
# updating rule for figures does not reproduce pics-3.pdf
.PHONY: renew_all_julia_pics
renew_all_julia_pics:
	cd pics; rm -v $(PICS_FILE_NAMES_FOR_DELETION); cd ../; make

new:
	make

#+END_SRC
